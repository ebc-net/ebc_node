// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EbcNode_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EbcNodes_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_search_msg_2eproto;
namespace config {
class EbcNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EbcNode> _instance;
} _EbcNode_default_instance_;
class EbcNodesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EbcNodes> _instance;
} _EbcNodes_default_instance_;
class searchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<search> _instance;
} _search_default_instance_;
class EbcMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EbcMsg> _instance;
  const ::config::search* msg_;
  const ::config::EbcNodes* nodes_;
} _EbcMsg_default_instance_;
}  // namespace config
static void InitDefaultsEbcNode_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::config::_EbcNode_default_instance_;
    new (ptr) ::config::EbcNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::config::EbcNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EbcNode_msg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEbcNode_msg_2eproto}, {}};

static void InitDefaultsEbcNodes_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::config::_EbcNodes_default_instance_;
    new (ptr) ::config::EbcNodes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::config::EbcNodes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EbcNodes_msg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEbcNodes_msg_2eproto}, {
      &scc_info_EbcNode_msg_2eproto.base,}};

static void InitDefaultssearch_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::config::_search_default_instance_;
    new (ptr) ::config::search();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::config::search::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_search_msg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssearch_msg_2eproto}, {
      &scc_info_EbcNodes_msg_2eproto.base,}};

static void InitDefaultsEbcMsg_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::config::_EbcMsg_default_instance_;
    new (ptr) ::config::EbcMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::config::EbcMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EbcMsg_msg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEbcMsg_msg_2eproto}, {
      &scc_info_search_msg_2eproto.base,
      &scc_info_EbcNodes_msg_2eproto.base,}};

namespace config {
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool MsgSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EbcNode::InitAsDefaultInstance() {
}
class EbcNode::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EbcNode::kIdFieldNumber;
const int EbcNode::kIpFieldNumber;
const int EbcNode::kPortNatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EbcNode::EbcNode()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.EbcNode)
}
EbcNode::EbcNode(const EbcNode& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_nat_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(port_nat_));
  // @@protoc_insertion_point(copy_constructor:config.EbcNode)
}

void EbcNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EbcNode_msg_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_nat_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(port_nat_));
}

EbcNode::~EbcNode() {
  // @@protoc_insertion_point(destructor:config.EbcNode)
  SharedDtor();
}

void EbcNode::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EbcNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EbcNode& EbcNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EbcNode_msg_2eproto.base);
  return *internal_default_instance();
}


void EbcNode::Clear() {
// @@protoc_insertion_point(message_clear_start:config.EbcNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_nat_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(port_nat_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EbcNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EbcNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 port_nat = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_port_nat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EbcNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:config.EbcNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port_nat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_nat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.EbcNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.EbcNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EbcNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.EbcNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // uint32 ip = 2;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip(), output);
  }

  // uint32 port_nat = 3;
  if (this->port_nat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port_nat(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:config.EbcNode)
}

size_t EbcNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.EbcNode)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // uint32 ip = 2;
  if (this->ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());
  }

  // uint32 port_nat = 3;
  if (this->port_nat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port_nat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EbcNode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EbcNode*>(&from));
}

void EbcNode::MergeFrom(const EbcNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.EbcNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.port_nat() != 0) {
    set_port_nat(from.port_nat());
  }
}

void EbcNode::CopyFrom(const EbcNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.EbcNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbcNode::IsInitialized() const {
  return true;
}

void EbcNode::Swap(EbcNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EbcNode::InternalSwap(EbcNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ip_, other->ip_);
  swap(port_nat_, other->port_nat_);
}

::std::string EbcNode::GetTypeName() const {
  return "config.EbcNode";
}


// ===================================================================

void EbcNodes::InitAsDefaultInstance() {
}
class EbcNodes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EbcNodes::kEbcNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EbcNodes::EbcNodes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.EbcNodes)
}
EbcNodes::EbcNodes(const EbcNodes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      ebcnodes_(from.ebcnodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:config.EbcNodes)
}

void EbcNodes::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EbcNodes_msg_2eproto.base);
}

EbcNodes::~EbcNodes() {
  // @@protoc_insertion_point(destructor:config.EbcNodes)
  SharedDtor();
}

void EbcNodes::SharedDtor() {
}

void EbcNodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EbcNodes& EbcNodes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EbcNodes_msg_2eproto.base);
  return *internal_default_instance();
}


void EbcNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:config.EbcNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ebcnodes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EbcNodes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EbcNodes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .config.EbcNode ebcNodes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::config::EbcNode::_InternalParse;
          object = msg->add_ebcnodes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EbcNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:config.EbcNodes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .config.EbcNode ebcNodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ebcnodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.EbcNodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.EbcNodes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EbcNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.EbcNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .config.EbcNode ebcNodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ebcnodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->ebcnodes(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:config.EbcNodes)
}

size_t EbcNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.EbcNodes)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .config.EbcNode ebcNodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ebcnodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ebcnodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EbcNodes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EbcNodes*>(&from));
}

void EbcNodes::MergeFrom(const EbcNodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.EbcNodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ebcnodes_.MergeFrom(from.ebcnodes_);
}

void EbcNodes::CopyFrom(const EbcNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.EbcNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbcNodes::IsInitialized() const {
  return true;
}

void EbcNodes::Swap(EbcNodes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EbcNodes::InternalSwap(EbcNodes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ebcnodes_)->InternalSwap(CastToBase(&other->ebcnodes_));
}

::std::string EbcNodes::GetTypeName() const {
  return "config.EbcNodes";
}


// ===================================================================

void search::InitAsDefaultInstance() {
  ::config::_search_default_instance_._instance.get_mutable()->nodes_ = const_cast< ::config::EbcNodes*>(
      ::config::EbcNodes::internal_default_instance());
}
class search::HasBitSetters {
 public:
  static const ::config::EbcNodes& nodes(const search* msg);
};

const ::config::EbcNodes&
search::HasBitSetters::nodes(const search* msg) {
  return *msg->nodes_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int search::kIsIdFieldNumber;
const int search::kTidFieldNumber;
const int search::kTargetIdFieldNumber;
const int search::kNodesFieldNumber;
const int search::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

search::search()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.search)
}
search::search(const search& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tid().size() > 0) {
    tid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tid_);
  }
  targetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.targetid().size() > 0) {
    targetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetid_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_nodes()) {
    nodes_ = new ::config::EbcNodes(*from.nodes_);
  } else {
    nodes_ = nullptr;
  }
  isid_ = from.isid_;
  // @@protoc_insertion_point(copy_constructor:config.search)
}

void search::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_search_msg_2eproto.base);
  tid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isid_) -
      reinterpret_cast<char*>(&nodes_)) + sizeof(isid_));
}

search::~search() {
  // @@protoc_insertion_point(destructor:config.search)
  SharedDtor();
}

void search::SharedDtor() {
  tid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nodes_;
}

void search::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const search& search::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_search_msg_2eproto.base);
  return *internal_default_instance();
}


void search::Clear() {
// @@protoc_insertion_point(message_clear_start:config.search)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && nodes_ != nullptr) {
    delete nodes_;
  }
  nodes_ = nullptr;
  isid_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* search::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<search*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool isId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_isid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes tid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_tid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes targetId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_targetid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .config.EbcNodes nodes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::config::EbcNodes::_InternalParse;
        object = msg->mutable_nodes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes value = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool search::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:config.search)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes tid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes targetId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .config.EbcNodes nodes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.search)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.search)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void search::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.search)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isId = 1;
  if (this->isid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isid(), output);
  }

  // bytes tid = 2;
  if (this->tid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->tid(), output);
  }

  // bytes targetId = 3;
  if (this->targetid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->targetid(), output);
  }

  // .config.EbcNodes nodes = 4;
  if (this->has_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, HasBitSetters::nodes(this), output);
  }

  // bytes value = 5;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:config.search)
}

size_t search::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.search)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tid = 2;
  if (this->tid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tid());
  }

  // bytes targetId = 3;
  if (this->targetid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->targetid());
  }

  // bytes value = 5;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .config.EbcNodes nodes = 4;
  if (this->has_nodes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *nodes_);
  }

  // bool isId = 1;
  if (this->isid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void search::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const search*>(&from));
}

void search::MergeFrom(const search& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.search)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tid().size() > 0) {

    tid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tid_);
  }
  if (from.targetid().size() > 0) {

    targetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.targetid_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_nodes()) {
    mutable_nodes()->::config::EbcNodes::MergeFrom(from.nodes());
  }
  if (from.isid() != 0) {
    set_isid(from.isid());
  }
}

void search::CopyFrom(const search& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.search)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool search::IsInitialized() const {
  return true;
}

void search::Swap(search* other) {
  if (other == this) return;
  InternalSwap(other);
}
void search::InternalSwap(search* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tid_.Swap(&other->tid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  targetid_.Swap(&other->targetid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nodes_, other->nodes_);
  swap(isid_, other->isid_);
}

::std::string search::GetTypeName() const {
  return "config.search";
}


// ===================================================================

void EbcMsg::InitAsDefaultInstance() {
}
class EbcMsg::HasBitSetters {
 public:
  static const ::config::search& msg(const EbcMsg* msg);
  static const ::config::EbcNodes& nodes(const EbcMsg* msg);
};

const ::config::search&
EbcMsg::HasBitSetters::msg(const EbcMsg* msg) {
  return *msg->body_.msg_;
}
const ::config::EbcNodes&
EbcMsg::HasBitSetters::nodes(const EbcMsg* msg) {
  return *msg->body_.nodes_;
}
void EbcMsg::set_allocated_msg(::config::search* msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_body();
  if (msg) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    set_has_msg();
    body_.msg_ = msg;
  }
  // @@protoc_insertion_point(field_set_allocated:config.EbcMsg.msg)
}
void EbcMsg::set_allocated_nodes(::config::EbcNodes* nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_body();
  if (nodes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nodes, submessage_arena);
    }
    set_has_nodes();
    body_.nodes_ = nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:config.EbcMsg.nodes)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EbcMsg::kHeadFieldNumber;
const int EbcMsg::kVersionFieldNumber;
const int EbcMsg::kSrcIdFieldNumber;
const int EbcMsg::kTtlFieldNumber;
const int EbcMsg::kIdFieldNumber;
const int EbcMsg::kTypeFieldNumber;
const int EbcMsg::kSubTypeFieldNumber;
const int EbcMsg::kLengthFieldNumber;
const int EbcMsg::kMsgFieldNumber;
const int EbcMsg::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EbcMsg::EbcMsg()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.EbcMsg)
}
EbcMsg::EbcMsg(const EbcMsg& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  src_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_id().size() > 0) {
    src_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_id_);
  }
  ::memcpy(&head_, &from.head_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&head_)) + sizeof(length_));
  clear_has_body();
  switch (from.body_case()) {
    case kMsg: {
      mutable_msg()->::config::search::MergeFrom(from.msg());
      break;
    }
    case kNodes: {
      mutable_nodes()->::config::EbcNodes::MergeFrom(from.nodes());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:config.EbcMsg)
}

void EbcMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EbcMsg_msg_2eproto.base);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&head_)) + sizeof(length_));
  clear_has_body();
}

EbcMsg::~EbcMsg() {
  // @@protoc_insertion_point(destructor:config.EbcMsg)
  SharedDtor();
}

void EbcMsg::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_body()) {
    clear_body();
  }
}

void EbcMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EbcMsg& EbcMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EbcMsg_msg_2eproto.base);
  return *internal_default_instance();
}


void EbcMsg::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:config.EbcMsg)
  switch (body_case()) {
    case kMsg: {
      delete body_.msg_;
      break;
    }
    case kNodes: {
      delete body_.nodes_;
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void EbcMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:config.EbcMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&head_)) + sizeof(length_));
  clear_body();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EbcMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EbcMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 head = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_head(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes src_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_src_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 ttl = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_ttl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .config.MsgType type = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::config::MsgType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .config.MsgSubType sub_type = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_sub_type(static_cast<::config::MsgSubType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 length = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_length(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .config.search msg = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::config::search::_InternalParse;
        object = msg->mutable_msg();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .config.EbcNodes nodes = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::config::EbcNodes::_InternalParse;
        object = msg->mutable_nodes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EbcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:config.EbcMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "config.EbcMsg.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes src_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ttl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .config.MsgType type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::config::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .config.MsgSubType sub_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sub_type(static_cast< ::config::MsgSubType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 length = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .config.search msg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .config.EbcNodes nodes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.EbcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.EbcMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EbcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.EbcMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 head = 1;
  if (this->head() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->head(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "config.EbcMsg.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // bytes src_id = 3;
  if (this->src_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->src_id(), output);
  }

  // uint32 ttl = 5;
  if (this->ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ttl(), output);
  }

  // uint32 id = 6;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->id(), output);
  }

  // .config.MsgType type = 7;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // .config.MsgSubType sub_type = 8;
  if (this->sub_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->sub_type(), output);
  }

  // uint32 length = 9;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->length(), output);
  }

  // .config.search msg = 10;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, HasBitSetters::msg(this), output);
  }

  // .config.EbcNodes nodes = 11;
  if (has_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, HasBitSetters::nodes(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:config.EbcMsg)
}

size_t EbcMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.EbcMsg)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // bytes src_id = 3;
  if (this->src_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->src_id());
  }

  // uint32 head = 1;
  if (this->head() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->head());
  }

  // uint32 ttl = 5;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ttl());
  }

  // uint32 id = 6;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // .config.MsgType type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .config.MsgSubType sub_type = 8;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_type());
  }

  // uint32 length = 9;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  switch (body_case()) {
    // .config.search msg = 10;
    case kMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *body_.msg_);
      break;
    }
    // .config.EbcNodes nodes = 11;
    case kNodes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *body_.nodes_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EbcMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EbcMsg*>(&from));
}

void EbcMsg::MergeFrom(const EbcMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.EbcMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.src_id().size() > 0) {

    src_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_id_);
  }
  if (from.head() != 0) {
    set_head(from.head());
  }
  if (from.ttl() != 0) {
    set_ttl(from.ttl());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.sub_type() != 0) {
    set_sub_type(from.sub_type());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  switch (from.body_case()) {
    case kMsg: {
      mutable_msg()->::config::search::MergeFrom(from.msg());
      break;
    }
    case kNodes: {
      mutable_nodes()->::config::EbcNodes::MergeFrom(from.nodes());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
}

void EbcMsg::CopyFrom(const EbcMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.EbcMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbcMsg::IsInitialized() const {
  return true;
}

void EbcMsg::Swap(EbcMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EbcMsg::InternalSwap(EbcMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  src_id_.Swap(&other->src_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(head_, other->head_);
  swap(ttl_, other->ttl_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(sub_type_, other->sub_type_);
  swap(length_, other->length_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::std::string EbcMsg::GetTypeName() const {
  return "config.EbcMsg";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::config::EbcNode* Arena::CreateMaybeMessage< ::config::EbcNode >(Arena* arena) {
  return Arena::CreateInternal< ::config::EbcNode >(arena);
}
template<> PROTOBUF_NOINLINE ::config::EbcNodes* Arena::CreateMaybeMessage< ::config::EbcNodes >(Arena* arena) {
  return Arena::CreateInternal< ::config::EbcNodes >(arena);
}
template<> PROTOBUF_NOINLINE ::config::search* Arena::CreateMaybeMessage< ::config::search >(Arena* arena) {
  return Arena::CreateInternal< ::config::search >(arena);
}
template<> PROTOBUF_NOINLINE ::config::EbcMsg* Arena::CreateMaybeMessage< ::config::EbcMsg >(Arena* arena) {
  return Arena::CreateInternal< ::config::EbcMsg >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
