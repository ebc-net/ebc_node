// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_INCLUDED_msg_2eproto
#define PROTOBUF_INCLUDED_msg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_msg_2eproto 

namespace protobuf_msg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_msg_2eproto
namespace config {
class EbcMsg;
class EbcMsgDefaultTypeInternal;
extern EbcMsgDefaultTypeInternal _EbcMsg_default_instance_;
class EbcNode;
class EbcNodeDefaultTypeInternal;
extern EbcNodeDefaultTypeInternal _EbcNode_default_instance_;
class EbcNodes;
class EbcNodesDefaultTypeInternal;
extern EbcNodesDefaultTypeInternal _EbcNodes_default_instance_;
}  // namespace config
namespace google {
namespace protobuf {
template<> ::config::EbcMsg* Arena::CreateMaybeMessage<::config::EbcMsg>(Arena*);
template<> ::config::EbcNode* Arena::CreateMaybeMessage<::config::EbcNode>(Arena*);
template<> ::config::EbcNodes* Arena::CreateMaybeMessage<::config::EbcNodes>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace config {

enum MsgType {
  EMPTY = 0,
  GET_NODE = 1,
  GET_DATA = 2,
  PING = 3,
  HEART = 4,
  REP = 5,
  PUNCH = 6,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = EMPTY;
const MsgType MsgType_MAX = PUNCH;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

enum MsgSubType {
  EMPTY_SUB = 0,
  PONG = 1,
  NODE = 2,
  DATA = 3,
  MsgSubType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgSubType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgSubType_IsValid(int value);
const MsgSubType MsgSubType_MIN = EMPTY_SUB;
const MsgSubType MsgSubType_MAX = DATA;
const int MsgSubType_ARRAYSIZE = MsgSubType_MAX + 1;

// ===================================================================

class EbcNode : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:config.EbcNode) */ {
 public:
  EbcNode();
  virtual ~EbcNode();

  EbcNode(const EbcNode& from);

  inline EbcNode& operator=(const EbcNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EbcNode(EbcNode&& from) noexcept
    : EbcNode() {
    *this = ::std::move(from);
  }

  inline EbcNode& operator=(EbcNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const EbcNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EbcNode* internal_default_instance() {
    return reinterpret_cast<const EbcNode*>(
               &_EbcNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EbcNode* other);
  friend void swap(EbcNode& a, EbcNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EbcNode* New() const final {
    return CreateMaybeMessage<EbcNode>(NULL);
  }

  EbcNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EbcNode>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const EbcNode& from);
  void MergeFrom(const EbcNode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EbcNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // uint32 ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // uint32 port_nat = 3;
  void clear_port_nat();
  static const int kPortNatFieldNumber = 3;
  ::google::protobuf::uint32 port_nat() const;
  void set_port_nat(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:config.EbcNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 port_nat_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EbcNodes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:config.EbcNodes) */ {
 public:
  EbcNodes();
  virtual ~EbcNodes();

  EbcNodes(const EbcNodes& from);

  inline EbcNodes& operator=(const EbcNodes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EbcNodes(EbcNodes&& from) noexcept
    : EbcNodes() {
    *this = ::std::move(from);
  }

  inline EbcNodes& operator=(EbcNodes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const EbcNodes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EbcNodes* internal_default_instance() {
    return reinterpret_cast<const EbcNodes*>(
               &_EbcNodes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EbcNodes* other);
  friend void swap(EbcNodes& a, EbcNodes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EbcNodes* New() const final {
    return CreateMaybeMessage<EbcNodes>(NULL);
  }

  EbcNodes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EbcNodes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const EbcNodes& from);
  void MergeFrom(const EbcNodes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EbcNodes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .config.EbcNode ebcNodes = 1;
  int ebcnodes_size() const;
  void clear_ebcnodes();
  static const int kEbcNodesFieldNumber = 1;
  ::config::EbcNode* mutable_ebcnodes(int index);
  ::google::protobuf::RepeatedPtrField< ::config::EbcNode >*
      mutable_ebcnodes();
  const ::config::EbcNode& ebcnodes(int index) const;
  ::config::EbcNode* add_ebcnodes();
  const ::google::protobuf::RepeatedPtrField< ::config::EbcNode >&
      ebcnodes() const;

  // @@protoc_insertion_point(class_scope:config.EbcNodes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::config::EbcNode > ebcnodes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EbcMsg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:config.EbcMsg) */ {
 public:
  EbcMsg();
  virtual ~EbcMsg();

  EbcMsg(const EbcMsg& from);

  inline EbcMsg& operator=(const EbcMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EbcMsg(EbcMsg&& from) noexcept
    : EbcMsg() {
    *this = ::std::move(from);
  }

  inline EbcMsg& operator=(EbcMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const EbcMsg& default_instance();

  enum BodyCase {
    kMsg = 10,
    kNodes = 11,
    BODY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EbcMsg* internal_default_instance() {
    return reinterpret_cast<const EbcMsg*>(
               &_EbcMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EbcMsg* other);
  friend void swap(EbcMsg& a, EbcMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EbcMsg* New() const final {
    return CreateMaybeMessage<EbcMsg>(NULL);
  }

  EbcMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EbcMsg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const EbcMsg& from);
  void MergeFrom(const EbcMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EbcMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // bytes src_id = 3;
  void clear_src_id();
  static const int kSrcIdFieldNumber = 3;
  const ::std::string& src_id() const;
  void set_src_id(const ::std::string& value);
  #if LANG_CXX11
  void set_src_id(::std::string&& value);
  #endif
  void set_src_id(const char* value);
  void set_src_id(const void* value, size_t size);
  ::std::string* mutable_src_id();
  ::std::string* release_src_id();
  void set_allocated_src_id(::std::string* src_id);

  // bytes dst_id = 4;
  void clear_dst_id();
  static const int kDstIdFieldNumber = 4;
  const ::std::string& dst_id() const;
  void set_dst_id(const ::std::string& value);
  #if LANG_CXX11
  void set_dst_id(::std::string&& value);
  #endif
  void set_dst_id(const char* value);
  void set_dst_id(const void* value, size_t size);
  ::std::string* mutable_dst_id();
  ::std::string* release_dst_id();
  void set_allocated_dst_id(::std::string* dst_id);

  // uint32 head = 1;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  ::google::protobuf::uint32 head() const;
  void set_head(::google::protobuf::uint32 value);

  // uint32 ttl = 5;
  void clear_ttl();
  static const int kTtlFieldNumber = 5;
  ::google::protobuf::uint32 ttl() const;
  void set_ttl(::google::protobuf::uint32 value);

  // uint32 id = 6;
  void clear_id();
  static const int kIdFieldNumber = 6;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .config.MsgType type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::config::MsgType type() const;
  void set_type(::config::MsgType value);

  // .config.MsgSubType sub_type = 8;
  void clear_sub_type();
  static const int kSubTypeFieldNumber = 8;
  ::config::MsgSubType sub_type() const;
  void set_sub_type(::config::MsgSubType value);

  // uint32 length = 9;
  void clear_length();
  static const int kLengthFieldNumber = 9;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // bytes msg = 10;
  private:
  bool has_msg() const;
  public:
  void clear_msg();
  static const int kMsgFieldNumber = 10;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .config.EbcNodes nodes = 11;
  bool has_nodes() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 11;
  private:
  const ::config::EbcNodes& _internal_nodes() const;
  public:
  const ::config::EbcNodes& nodes() const;
  ::config::EbcNodes* release_nodes();
  ::config::EbcNodes* mutable_nodes();
  void set_allocated_nodes(::config::EbcNodes* nodes);

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:config.EbcMsg)
 private:
  void set_has_msg();
  void set_has_nodes();

  inline bool has_body() const;
  inline void clear_has_body();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr src_id_;
  ::google::protobuf::internal::ArenaStringPtr dst_id_;
  ::google::protobuf::uint32 head_;
  ::google::protobuf::uint32 ttl_;
  ::google::protobuf::uint32 id_;
  int type_;
  int sub_type_;
  ::google::protobuf::uint32 length_;
  union BodyUnion {
    BodyUnion() {}
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::config::EbcNodes* nodes_;
  } body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EbcNode

// bytes id = 1;
inline void EbcNode::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EbcNode::id() const {
  // @@protoc_insertion_point(field_get:config.EbcNode.id)
  return id_.GetNoArena();
}
inline void EbcNode::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.EbcNode.id)
}
#if LANG_CXX11
inline void EbcNode::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.EbcNode.id)
}
#endif
inline void EbcNode::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.EbcNode.id)
}
inline void EbcNode::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.EbcNode.id)
}
inline ::std::string* EbcNode::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:config.EbcNode.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EbcNode::release_id() {
  // @@protoc_insertion_point(field_release:config.EbcNode.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EbcNode::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:config.EbcNode.id)
}

// uint32 ip = 2;
inline void EbcNode::clear_ip() {
  ip_ = 0u;
}
inline ::google::protobuf::uint32 EbcNode::ip() const {
  // @@protoc_insertion_point(field_get:config.EbcNode.ip)
  return ip_;
}
inline void EbcNode::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:config.EbcNode.ip)
}

// uint32 port_nat = 3;
inline void EbcNode::clear_port_nat() {
  port_nat_ = 0u;
}
inline ::google::protobuf::uint32 EbcNode::port_nat() const {
  // @@protoc_insertion_point(field_get:config.EbcNode.port_nat)
  return port_nat_;
}
inline void EbcNode::set_port_nat(::google::protobuf::uint32 value) {
  
  port_nat_ = value;
  // @@protoc_insertion_point(field_set:config.EbcNode.port_nat)
}

// -------------------------------------------------------------------

// EbcNodes

// repeated .config.EbcNode ebcNodes = 1;
inline int EbcNodes::ebcnodes_size() const {
  return ebcnodes_.size();
}
inline void EbcNodes::clear_ebcnodes() {
  ebcnodes_.Clear();
}
inline ::config::EbcNode* EbcNodes::mutable_ebcnodes(int index) {
  // @@protoc_insertion_point(field_mutable:config.EbcNodes.ebcNodes)
  return ebcnodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::config::EbcNode >*
EbcNodes::mutable_ebcnodes() {
  // @@protoc_insertion_point(field_mutable_list:config.EbcNodes.ebcNodes)
  return &ebcnodes_;
}
inline const ::config::EbcNode& EbcNodes::ebcnodes(int index) const {
  // @@protoc_insertion_point(field_get:config.EbcNodes.ebcNodes)
  return ebcnodes_.Get(index);
}
inline ::config::EbcNode* EbcNodes::add_ebcnodes() {
  // @@protoc_insertion_point(field_add:config.EbcNodes.ebcNodes)
  return ebcnodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::config::EbcNode >&
EbcNodes::ebcnodes() const {
  // @@protoc_insertion_point(field_list:config.EbcNodes.ebcNodes)
  return ebcnodes_;
}

// -------------------------------------------------------------------

// EbcMsg

// uint32 head = 1;
inline void EbcMsg::clear_head() {
  head_ = 0u;
}
inline ::google::protobuf::uint32 EbcMsg::head() const {
  // @@protoc_insertion_point(field_get:config.EbcMsg.head)
  return head_;
}
inline void EbcMsg::set_head(::google::protobuf::uint32 value) {
  
  head_ = value;
  // @@protoc_insertion_point(field_set:config.EbcMsg.head)
}

// string version = 2;
inline void EbcMsg::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EbcMsg::version() const {
  // @@protoc_insertion_point(field_get:config.EbcMsg.version)
  return version_.GetNoArena();
}
inline void EbcMsg::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.EbcMsg.version)
}
#if LANG_CXX11
inline void EbcMsg::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.EbcMsg.version)
}
#endif
inline void EbcMsg::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.EbcMsg.version)
}
inline void EbcMsg::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.EbcMsg.version)
}
inline ::std::string* EbcMsg::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:config.EbcMsg.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EbcMsg::release_version() {
  // @@protoc_insertion_point(field_release:config.EbcMsg.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EbcMsg::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:config.EbcMsg.version)
}

// bytes src_id = 3;
inline void EbcMsg::clear_src_id() {
  src_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EbcMsg::src_id() const {
  // @@protoc_insertion_point(field_get:config.EbcMsg.src_id)
  return src_id_.GetNoArena();
}
inline void EbcMsg::set_src_id(const ::std::string& value) {
  
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.EbcMsg.src_id)
}
#if LANG_CXX11
inline void EbcMsg::set_src_id(::std::string&& value) {
  
  src_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.EbcMsg.src_id)
}
#endif
inline void EbcMsg::set_src_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.EbcMsg.src_id)
}
inline void EbcMsg::set_src_id(const void* value, size_t size) {
  
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.EbcMsg.src_id)
}
inline ::std::string* EbcMsg::mutable_src_id() {
  
  // @@protoc_insertion_point(field_mutable:config.EbcMsg.src_id)
  return src_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EbcMsg::release_src_id() {
  // @@protoc_insertion_point(field_release:config.EbcMsg.src_id)
  
  return src_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EbcMsg::set_allocated_src_id(::std::string* src_id) {
  if (src_id != NULL) {
    
  } else {
    
  }
  src_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_id);
  // @@protoc_insertion_point(field_set_allocated:config.EbcMsg.src_id)
}

// bytes dst_id = 4;
inline void EbcMsg::clear_dst_id() {
  dst_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EbcMsg::dst_id() const {
  // @@protoc_insertion_point(field_get:config.EbcMsg.dst_id)
  return dst_id_.GetNoArena();
}
inline void EbcMsg::set_dst_id(const ::std::string& value) {
  
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.EbcMsg.dst_id)
}
#if LANG_CXX11
inline void EbcMsg::set_dst_id(::std::string&& value) {
  
  dst_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.EbcMsg.dst_id)
}
#endif
inline void EbcMsg::set_dst_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.EbcMsg.dst_id)
}
inline void EbcMsg::set_dst_id(const void* value, size_t size) {
  
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.EbcMsg.dst_id)
}
inline ::std::string* EbcMsg::mutable_dst_id() {
  
  // @@protoc_insertion_point(field_mutable:config.EbcMsg.dst_id)
  return dst_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EbcMsg::release_dst_id() {
  // @@protoc_insertion_point(field_release:config.EbcMsg.dst_id)
  
  return dst_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EbcMsg::set_allocated_dst_id(::std::string* dst_id) {
  if (dst_id != NULL) {
    
  } else {
    
  }
  dst_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_id);
  // @@protoc_insertion_point(field_set_allocated:config.EbcMsg.dst_id)
}

// uint32 ttl = 5;
inline void EbcMsg::clear_ttl() {
  ttl_ = 0u;
}
inline ::google::protobuf::uint32 EbcMsg::ttl() const {
  // @@protoc_insertion_point(field_get:config.EbcMsg.ttl)
  return ttl_;
}
inline void EbcMsg::set_ttl(::google::protobuf::uint32 value) {
  
  ttl_ = value;
  // @@protoc_insertion_point(field_set:config.EbcMsg.ttl)
}

// uint32 id = 6;
inline void EbcMsg::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 EbcMsg::id() const {
  // @@protoc_insertion_point(field_get:config.EbcMsg.id)
  return id_;
}
inline void EbcMsg::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:config.EbcMsg.id)
}

// .config.MsgType type = 7;
inline void EbcMsg::clear_type() {
  type_ = 0;
}
inline ::config::MsgType EbcMsg::type() const {
  // @@protoc_insertion_point(field_get:config.EbcMsg.type)
  return static_cast< ::config::MsgType >(type_);
}
inline void EbcMsg::set_type(::config::MsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:config.EbcMsg.type)
}

// .config.MsgSubType sub_type = 8;
inline void EbcMsg::clear_sub_type() {
  sub_type_ = 0;
}
inline ::config::MsgSubType EbcMsg::sub_type() const {
  // @@protoc_insertion_point(field_get:config.EbcMsg.sub_type)
  return static_cast< ::config::MsgSubType >(sub_type_);
}
inline void EbcMsg::set_sub_type(::config::MsgSubType value) {
  
  sub_type_ = value;
  // @@protoc_insertion_point(field_set:config.EbcMsg.sub_type)
}

// uint32 length = 9;
inline void EbcMsg::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 EbcMsg::length() const {
  // @@protoc_insertion_point(field_get:config.EbcMsg.length)
  return length_;
}
inline void EbcMsg::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:config.EbcMsg.length)
}

// bytes msg = 10;
inline bool EbcMsg::has_msg() const {
  return body_case() == kMsg;
}
inline void EbcMsg::set_has_msg() {
  _oneof_case_[0] = kMsg;
}
inline void EbcMsg::clear_msg() {
  if (has_msg()) {
    body_.msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_body();
  }
}
inline const ::std::string& EbcMsg::msg() const {
  // @@protoc_insertion_point(field_get:config.EbcMsg.msg)
  if (has_msg()) {
    return body_.msg_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void EbcMsg::set_msg(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:config.EbcMsg.msg)
  if (!has_msg()) {
    clear_body();
    set_has_msg();
    body_.msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  body_.msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.EbcMsg.msg)
}
#if LANG_CXX11
inline void EbcMsg::set_msg(::std::string&& value) {
  // @@protoc_insertion_point(field_set:config.EbcMsg.msg)
  if (!has_msg()) {
    clear_body();
    set_has_msg();
    body_.msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  body_.msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.EbcMsg.msg)
}
#endif
inline void EbcMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_msg()) {
    clear_body();
    set_has_msg();
    body_.msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  body_.msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.EbcMsg.msg)
}
inline void EbcMsg::set_msg(const void* value, size_t size) {
  if (!has_msg()) {
    clear_body();
    set_has_msg();
    body_.msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  body_.msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.EbcMsg.msg)
}
inline ::std::string* EbcMsg::mutable_msg() {
  if (!has_msg()) {
    clear_body();
    set_has_msg();
    body_.msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:config.EbcMsg.msg)
  return body_.msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EbcMsg::release_msg() {
  // @@protoc_insertion_point(field_release:config.EbcMsg.msg)
  if (has_msg()) {
    clear_has_body();
    return body_.msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void EbcMsg::set_allocated_msg(::std::string* msg) {
  if (!has_msg()) {
    body_.msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_body();
  if (msg != NULL) {
    set_has_msg();
    body_.msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  }
  // @@protoc_insertion_point(field_set_allocated:config.EbcMsg.msg)
}

// .config.EbcNodes nodes = 11;
inline bool EbcMsg::has_nodes() const {
  return body_case() == kNodes;
}
inline void EbcMsg::set_has_nodes() {
  _oneof_case_[0] = kNodes;
}
inline void EbcMsg::clear_nodes() {
  if (has_nodes()) {
    delete body_.nodes_;
    clear_has_body();
  }
}
inline const ::config::EbcNodes& EbcMsg::_internal_nodes() const {
  return *body_.nodes_;
}
inline ::config::EbcNodes* EbcMsg::release_nodes() {
  // @@protoc_insertion_point(field_release:config.EbcMsg.nodes)
  if (has_nodes()) {
    clear_has_body();
      ::config::EbcNodes* temp = body_.nodes_;
    body_.nodes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::config::EbcNodes& EbcMsg::nodes() const {
  // @@protoc_insertion_point(field_get:config.EbcMsg.nodes)
  return has_nodes()
      ? *body_.nodes_
      : *reinterpret_cast< ::config::EbcNodes*>(&::config::_EbcNodes_default_instance_);
}
inline ::config::EbcNodes* EbcMsg::mutable_nodes() {
  if (!has_nodes()) {
    clear_body();
    set_has_nodes();
    body_.nodes_ = CreateMaybeMessage< ::config::EbcNodes >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:config.EbcMsg.nodes)
  return body_.nodes_;
}

inline bool EbcMsg::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void EbcMsg::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline EbcMsg::BodyCase EbcMsg::body_case() const {
  return EbcMsg::BodyCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::config::MsgType> : ::std::true_type {};
template <> struct is_proto_enum< ::config::MsgSubType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_msg_2eproto
