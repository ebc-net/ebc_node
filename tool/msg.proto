syntax = "proto3";
option optimize_for = LITE_RUNTIME;
package config;

enum MsgType 
{
	EMPTY  = 0;
	GET_NODE = 1;
	GET_DATA =2;
	PING = 3;
	HEART = 4;
	REP   = 5;
	PUNCH = 6;
}

enum MsgSubType
{
	EMPTY_SUB = 0;
	PONG = 1;
	NODE = 2;
	DATA = 3;
}

message EbcNode
{
	bytes id = 1;//Id 20字节
	uint32 ip = 2;//节点IP 网络字节序
	uint32 port_nat = 3; //节点端口(网络字节序)和NAT类型,前16为PORT,4位NAT，后12位保留
}

message EbcNodes//服务器发回节点的消息
{
	repeated EbcNode ebcNodes= 1;
}

message EbcMsg
{
	uint32    head = 1;       //EBC消息的头部，必须字段，必须校验  0xF5FA
	string    version = 2;	  //版本号，必须字段，区分不同版本，必须校验
	bytes    src_id = 3;	  //发起节点的ID，对节点来说必须字段，对服务器来说，怎么处理？  -----}
	
	bytes    dst_id = 4;     //目的节点的ID，消息希望送达的节点ID。对服务器来说，怎么处理？---- |-->这三个是为后续
																							     //|节点转发使用的，//目前
	uint32    ttl = 5;	      //ttl值，没经过一个节点ttl减1，减到0丢弃消息	                -----} 作用不大
	uint32    id = 6;         //本条消息的ID，节点要对回应的消息做此ID校验，查看是否是上条消息的回应
							  //同时，对于后续节点转发可作为冗余处理的手段
	MsgType       type = 7;       //消息类型，必须字段
	MsgSubType    sub_type = 8;   //消息子类型，可选字段，多种ACK
	uint32    length = 9;     //消息正文长度，可表示节点个数，可选字段
	oneof body
	{	
		bytes    msg = 10;        //消息正文，可选字段
		EbcNodes nodes= 11;    //节点信息，如果消息子类型是NODE的话
	}
}
 
 
 
